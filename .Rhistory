subjson = fromJSON(completeJson[i,column])
even_odd_mask = seq_len(length(unlist(subjson[[2]][[1]][[1]]))) %% 2
list_X[[toString(completeJson[i,1])]] = unlist(subjson[[2]][[1]][[1]])[even_odd_mask==1]
list_Y[[toString(completeJson[i,1])]] = unlist(subjson[[2]][[1]][[1]])[even_odd_mask==0]
if(i %% 1000 == 0){cat('\n',i, '/',dimension)}
}
return(list(list_X = list_X, list_Y = list_Y))
}
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
db <- "postgres"  #provide the name of your db
host_db <- "localhost" #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- 5432  # or any other port specified by the DBA
db_user <- "postgres"
db_password <- toString(read.table("password.txt", header = F))
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
rm(db_password)
### Display Tables
dbListTables(con)
### Request for Area Data
fetchRequest = dbSendQuery(con,"SELECT id,
ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom,
bezeich
FROM
(SELECT * FROM nutzung_flaechen
WHERE bezeich = 'AX_Wohnbauflaeche'
OR bezeich = 'AX_FlaecheGemischterNutzung'
OR bezfkt = 'Kleingarten') AS secondtable
")
housingArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
hoursingDestructured = stringDestructure(completeJson = housingArea, column = 2)
hoursingDestructured$list_X
1+1
fetchRequest = dbSendQuery(con,"SELECT id,ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom FROM (SELECT * FROM flurstuecke_flaechen) AS secondtable")
LandArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
LandAreaDestructured = stringDestructure(completeJson = LandArea, column = 2)
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
### Connect to Database
db <- "postgres"  #provide the name of your db
host_db <- "localhost" #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- 5432  # or any other port specified by the DBA
db_user <- "postgres"
db_password <- toString(read.table("password.txt", header = F))
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
rm(db_password)
### Display Tables
dbListTables(con)
### Request for Area Data
fetchRequest = dbSendQuery(con,"SELECT id,
ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom,
bezeich
FROM
(SELECT * FROM nutzung_flaechen
WHERE bezeich = 'AX_Wohnbauflaeche'
OR bezeich = 'AX_FlaecheGemischterNutzung'
OR bezfkt = 'Kleingarten') AS secondtable
")
housingArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Request Land Plot data
fetchRequest = dbSendQuery(con,"SELECT id,ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom FROM (SELECT * FROM flurstuecke_flaechen) AS secondtable")
LandArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover/Saves")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover/Saves")
save(housingArea, file=paste("housingArea",".RData",sep = ""))
save(LandArea, file=paste("LandArea",".RData",sep = ""))
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
db <- "postgres"  #provide the name of your db
host_db <- "localhost" #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- 5432  # or any other port specified by the DBA
db_user <- "postgres"
db_password <- toString(read.table("password.txt", header = F))
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
rm(db_password)
### Display Tables
dbListTables(con)
### Request for Area Data
fetchRequest = dbSendQuery(con,"SELECT id,
ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom,
bezeich
FROM
(SELECT * FROM nutzung_flaechen
WHERE bezeich = 'AX_Wohnbauflaeche'
OR bezeich = 'AX_FlaecheGemischterNutzung'
OR bezfkt = 'Kleingarten') AS secondtable
")
housingArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
hoursingDestructured = stringDestructure(completeJson = housingArea, column = 2)
hoursingEnvelopArrays = concatEnvelopes(hoursingDestructured)
#Split Array - change
SplitArray = function(x_CoordinateVoctor,Y_CoordinateVoctor, ClusterVector, axis) {
if(axis == 'x'){
lowerBoundry = x_CoordinateVoctor < median(x_CoordinateVoctor)
upperBoundry = x_CoordinateVoctor >= median(x_CoordinateVoctor)
saved_meadian = median(x_CoordinateVoctor)
}
if(axis == 'y'){
lowerBoundry = Y_CoordinateVoctor < median(Y_CoordinateVoctor)
upperBoundry = Y_CoordinateVoctor >= median(Y_CoordinateVoctor)
saved_meadian = median(Y_CoordinateVoctor)
}
upperSlpitCoords_X = x_CoordinateVoctor[upperBoundry]
lowerSlpitCoords_X = x_CoordinateVoctor[lowerBoundry]
upperSlpitCoords_Y = Y_CoordinateVoctor[upperBoundry]
lowerSlpitCoords_Y = Y_CoordinateVoctor[lowerBoundry]
upperSlpitCluster = ClusterVector[upperBoundry]
lowerSlpitCluster = ClusterVector[lowerBoundry]
return(list(upperSlpit_X = upperSlpitCoords_X, lowerSlpit_X = lowerSlpitCoords_X,
upperSlpit_Y = upperSlpitCoords_Y, lowerSlpit_Y = lowerSlpitCoords_Y,
upperCluster = upperSlpitCluster, lowerCluster = lowerSlpitCluster,
median = saved_meadian))
}
install.packages("beepr")
library(beepr)
beep(sound = 1, expr = NULL)
beep(sound = 8, expr = NULL)
beep(sound = 2, expr = NULL)
beep(sound = 2, expr = NULL)
beep(sound = 2, expr = NULL)
beep(sound = 2, expr = NULL)
beep(sound = 2, expr = NULL)
beep(sound = 2, expr = NULL)
beep(sound = 2, expr = NULL)
beep(sound = "wilhelm", expr = NULL)
beep(sound = 4, expr = NULL)
beep(sound = 4, expr = NULL)
beep(sound = 4, expr = NULL)
beep(sound = 4, expr = NULL)
beep(sound = 4, expr = NULL)
beep(sound = 5, expr = NULL)
beep(sound = 8, expr = NULL)
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
#install.packages("beepr")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
library(beepr)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
### Connect to Database
db <- "postgres"  #provide the name of your db
host_db <- "localhost" #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- 5432  # or any other port specified by the DBA
db_user <- "postgres"
db_password <- toString(read.table("password.txt", header = F))
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
rm(db_password)
### Display Tables
dbListTables(con)
### Request for Area Data
fetchRequest = dbSendQuery(con,"SELECT id,
ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom,
bezeich
FROM
(SELECT * FROM nutzung_flaechen
WHERE bezeich = 'AX_Wohnbauflaeche'
OR bezeich = 'AX_FlaecheGemischterNutzung'
OR bezfkt = 'Kleingarten') AS secondtable
")
housingArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Request Land Plot data
fetchRequest = dbSendQuery(con,"SELECT id,ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom FROM (SELECT * FROM flurstuecke_flaechen) AS secondtable")
LandArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Load in the Json to R
hoursingDestructured = stringDestructure(completeJson = housingArea, column = 2)
LandAreaDestructured = stringDestructure(completeJson = LandArea, column = 2)
### Concatenate the boundary data for the R-Tree
hoursingEnvelopArrays = concatEnvelopes(hoursingDestructured)
LandAreaEnvelopArrays = concatEnvelopes(hoursingDestructured)
beep(sound = 8, expr = NULL)
LandAreaEnvelopArrays = concatEnvelopes(LandAreaDestructured)
beep(sound = 8, expr = NULL)
save(hoursingDestructured, file=paste("hoursingDestructured",".RData",sep = ""))
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover/Saves/HardSaves")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover/Saves/HardSaves")
save(hoursingDestructured, file=paste("hoursingDestructured",".RData",sep = ""))
save(LandAreaDestructured, file=paste("LandAreaDestructured",".RData",sep = ""))
save(hoursingEnvelopArrays, file=paste("hoursingEnvelopArrays",".RData",sep = ""))
save(LandAreaEnvelopArrays, file=paste("LandAreaEnvelopArrays",".RData",sep = ""))
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
getwd()
paste(getwd(),"/Saves/HardSaves/")
paste(getwd(),"/Saves/HardSaves/",sep = "")
paste(getwd(),"/Saves/HardSaves/","hoursingDestructured.RData",sep = "")
load(paste(getwd(),"/Saves/HardSaves/","hoursingDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","hoursingEnvelopArrays.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaEnvelopArrays.RData",sep = ""))
loadAndCutData = FALSE #<-- when false stored R data gets loaded
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
#beep(sound = 8, expr = NULL)
loadAndCutData = FALSE #<-- when false stored R data gets loaded
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
#install.packages("beepr")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
library(beepr)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
if (loadAndCutData){
### Connect to Database
db <- "postgres"  #provide the name of your db
host_db <- "localhost" #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- 5432  # or any other port specified by the DBA
db_user <- "postgres"
db_password <- toString(read.table("password.txt", header = F))
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
rm(db_password)
### Display Tables
dbListTables(con)
### Request for Area Data
fetchRequest = dbSendQuery(con,"SELECT id,
ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom,
bezeich
FROM
(SELECT * FROM nutzung_flaechen
WHERE bezeich = 'AX_Wohnbauflaeche'
OR bezeich = 'AX_FlaecheGemischterNutzung'
OR bezfkt = 'Kleingarten') AS secondtable
")
housingArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Request Land Plot data
fetchRequest = dbSendQuery(con,"SELECT id,ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom FROM (SELECT * FROM flurstuecke_flaechen) AS secondtable")
LandArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Load in the Json to R
hoursingDestructured = stringDestructure(completeJson = housingArea, column = 2)
LandAreaDestructured = stringDestructure(completeJson = LandArea, column = 2)
### Concatenate the boundary data for the R-Tree
hoursingEnvelopArrays = concatEnvelopes(hoursingDestructured)
LandAreaEnvelopArrays = concatEnvelopes(LandAreaDestructured)
}else{
### Load from R-file
load(paste(getwd(),"/Saves/HardSaves/","hoursingDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","hoursingEnvelopArrays.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaEnvelopArrays.RData",sep = ""))
}
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/cover")
#beep(sound = 8, expr = NULL)
loadAndCutData = FALSE #<-- when false stored R data gets loaded
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
#install.packages("beepr")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
library(beepr)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
if (loadAndCutData){
### Connect to Database
db <- "postgres"  #provide the name of your db
host_db <- "localhost" #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- 5432  # or any other port specified by the DBA
db_user <- "postgres"
db_password <- toString(read.table("password.txt", header = F))
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
rm(db_password)
### Display Tables
dbListTables(con)
### Request for Area Data
fetchRequest = dbSendQuery(con,"SELECT id,
ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom,
bezeich
FROM
(SELECT * FROM nutzung_flaechen
WHERE bezeich = 'AX_Wohnbauflaeche'
OR bezeich = 'AX_FlaecheGemischterNutzung'
OR bezfkt = 'Kleingarten') AS secondtable
")
housingArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Request Land Plot data
fetchRequest = dbSendQuery(con,"SELECT id,ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom FROM (SELECT * FROM flurstuecke_flaechen) AS secondtable")
LandArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Load in the Json to R
hoursingDestructured = stringDestructure(completeJson = housingArea, column = 2)
LandAreaDestructured = stringDestructure(completeJson = LandArea, column = 2)
### Concatenate the boundary data for the R-Tree
hoursingEnvelopArrays = concatEnvelopes(hoursingDestructured)
LandAreaEnvelopArrays = concatEnvelopes(LandAreaDestructured)
}else{
### Load from R-file
load(paste(getwd(),"/Saves/HardSaves/","hoursingDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","hoursingEnvelopArrays.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaEnvelopArrays.RData",sep = ""))
}
LandAreaDestructured$list_X[1,1]
LandAreaDestructured$list_X[1]
LandAreaDestructured$list_X[2]
LandAreaDestructured$list_X[65]
LandAreaDestructured$list_X[24]
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/poolsOnFire")
### reset
rm(list = ls())
cat("\014")
setwd("V:/Tu_Konto/Geodesy/3_st/Project/Code/poolsOnFire")
#beep(sound = 8, expr = NULL)
loadAndCutData = FALSE #<-- when false stored R data gets loaded
### Load Packages
#install.packages('RPostgreSQL')
#install.packages('RPostgres')
#install.packages('stringr')
#install.packages("rjson")
#install.packages("beepr")
library(stringr)
library(RPostgreSQL)
library(RPostgres)
library(DBI)
library(rjson)
library(beepr)
### Get Source functions
source(file = paste(getwd(),"/","subfunctions/","stringDestructure.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","getBoundingBox.R",sep = ""))
source(file = paste(getwd(),"/","subfunctions/","concatEnvelopes.R",sep = ""))
if (loadAndCutData){
### Connect to Database
db <- "postgres"  #provide the name of your db
host_db <- "localhost" #i.e. # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
db_port <- 5432  # or any other port specified by the DBA
db_user <- "postgres"
db_password <- toString(read.table("password.txt", header = F))
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
rm(db_password)
### Display Tables
dbListTables(con)
### Request for Area Data
fetchRequest = dbSendQuery(con,"SELECT id,
ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom,
bezeich
FROM
(SELECT * FROM nutzung_flaechen
WHERE bezeich = 'AX_Wohnbauflaeche'
OR bezeich = 'AX_FlaecheGemischterNutzung'
OR bezfkt = 'Kleingarten') AS secondtable
")
housingArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Request Land Plot data
fetchRequest = dbSendQuery(con,"SELECT id,ST_AsGeoJSON(ST_Transform(geom, 4326),15,0)::json As geom FROM (SELECT * FROM flurstuecke_flaechen) AS secondtable")
LandArea = dbFetch(fetchRequest)
dbClearResult(fetchRequest)
### Load in the Json to R
hoursingDestructured = stringDestructure(completeJson = housingArea, column = 2)
LandAreaDestructured = stringDestructure(completeJson = LandArea, column = 2)
### Concatenate the boundary data for the R-Tree
hoursingEnvelopArrays = concatEnvelopes(hoursingDestructured)
LandAreaEnvelopArrays = concatEnvelopes(LandAreaDestructured)
}else{
### Load from R-file
load(paste(getwd(),"/Saves/HardSaves/","hoursingDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaDestructured.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","hoursingEnvelopArrays.RData",sep = ""))
load(paste(getwd(),"/Saves/HardSaves/","LandAreaEnvelopArrays.RData",sep = ""))
}
